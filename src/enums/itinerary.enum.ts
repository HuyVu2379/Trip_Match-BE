// Enum cho Status
export enum ItineraryStatus {
    DRAFT = 'draft',           // Nháp
    CONFIRMED = 'confirmed',   // Đã xác nhận
    COMPLETED = 'completed'    // Hoàn thành
}

// Enum cho Matched Score (1-10 hoặc 1-100)
export enum MatchedScore {
    VERY_LOW = 1,      // 1-2: Rất thấp
    LOW = 3,           // 3-4: Thấp
    MEDIUM = 5,        // 5-6: Trung bình
    HIGH = 7,          // 7-8: Cao
    VERY_HIGH = 9,     // 9-10: Rất cao
    PERFECT = 10       // 10: Hoàn hảo
}

// Enum cho Generated By
export enum GeneratedBy {
    AI = 'ai',
    USER = 'user',
    SYSTEM = 'system'
}

// Utility functions
export const getItineraryStatusDisplayName = (status: ItineraryStatus): string => {
    switch (status) {
        case ItineraryStatus.DRAFT:
            return 'Bản nháp';
        case ItineraryStatus.CONFIRMED:
            return 'Đã xác nhận';
        case ItineraryStatus.COMPLETED:
            return 'Hoàn thành';
        default:
            return 'Không xác định';
    }
};

export const getMatchedScoreDisplayName = (score: number): string => {
    if (score >= 9) return 'Hoàn hảo (9-10)';
    if (score >= 7) return 'Cao (7-8)';
    if (score >= 5) return 'Trung bình (5-6)';
    if (score >= 3) return 'Thấp (3-4)';
    return 'Rất thấp (1-2)';
};

export const getMatchedScoreColor = (score: number): string => {
    if (score >= 9) return '#4CAF50'; // Green
    if (score >= 7) return '#8BC34A'; // Light Green
    if (score >= 5) return '#FFC107'; // Amber
    if (score >= 3) return '#FF9800'; // Orange
    return '#F44336'; // Red
};

export const getGeneratedByDisplayName = (generatedBy: GeneratedBy): string => {
    switch (generatedBy) {
        case GeneratedBy.AI:
            return 'Tạo bởi AI';
        case GeneratedBy.USER:
            return 'Tạo bởi người dùng';
        case GeneratedBy.SYSTEM:
            return 'Tạo bởi hệ thống';
        default:
            return 'Không xác định';
    }
};

// Utility classes
export class ItineraryUtil {
    /**
     * Kiểm tra xem itinerary có đang active không
     */
    static isActive(status: ItineraryStatus): boolean {
        return status === ItineraryStatus.CONFIRMED;
    }

    /**
     * Kiểm tra xem itinerary có thể edit không
     */
    static canEdit(status: ItineraryStatus): boolean {
        return status === ItineraryStatus.DRAFT || status === ItineraryStatus.CONFIRMED;
    }

    /**
     * Kiểm tra xem itinerary có thể delete không
     */
    static canDelete(status: ItineraryStatus): boolean {
        return status === ItineraryStatus.DRAFT;
    }

    /**
     * Tính matched score dựa trên interests
     */
    static calculateMatchedScore(
        userInterests: string[],
        suggestedInterests: string[]
    ): number {
        if (userInterests.length === 0 || suggestedInterests.length === 0) {
            return 0;
        }

        const intersection = userInterests.filter(interest =>
            suggestedInterests.includes(interest)
        );

        const matchPercentage = (intersection.length / userInterests.length) * 100;
        return Math.round(matchPercentage / 10); // Convert to 1-10 scale
    }

    /**
     * Validate matched score range
     */
    static validateMatchedScore(score: number): boolean {
        return score >= 1 && score <= 10 && Number.isInteger(score);
    }

    /**
     * Get next status in workflow
     */
    static getNextStatus(currentStatus: ItineraryStatus): ItineraryStatus | null {
        switch (currentStatus) {
            case ItineraryStatus.DRAFT:
                return ItineraryStatus.CONFIRMED;
            case ItineraryStatus.CONFIRMED:
                return ItineraryStatus.COMPLETED;
            case ItineraryStatus.COMPLETED:
                return null; // No next status
            default:
                return null;
        }
    }

    /**
     * Get previous status in workflow
     */
    static getPreviousStatus(currentStatus: ItineraryStatus): ItineraryStatus | null {
        switch (currentStatus) {
            case ItineraryStatus.CONFIRMED:
                return ItineraryStatus.DRAFT;
            case ItineraryStatus.COMPLETED:
                return ItineraryStatus.CONFIRMED;
            case ItineraryStatus.DRAFT:
                return null; // No previous status
            default:
                return null;
        }
    }
}

// Parse functions
export const parseItineraryStatus = (value: string): ItineraryStatus | null => {
    return Object.values(ItineraryStatus).includes(value as ItineraryStatus)
        ? value as ItineraryStatus
        : null;
};

export const parseGeneratedBy = (value: string): GeneratedBy | null => {
    return Object.values(GeneratedBy).includes(value as GeneratedBy)
        ? value as GeneratedBy
        : null;
};

export const parseMatchedScore = (value: string | number): number | null => {
    const numValue = typeof value === 'string' ? parseInt(value, 10) : value;
    return ItineraryUtil.validateMatchedScore(numValue) ? numValue : null;
};

// Constants
export const ITINERARY_STATUS_COLORS = {
    [ItineraryStatus.DRAFT]: '#9E9E9E',
    [ItineraryStatus.CONFIRMED]: '#2196F3',
    [ItineraryStatus.COMPLETED]: '#4CAF50'
};

export const MATCHED_SCORE_THRESHOLDS = {
    EXCELLENT: 9,
    GOOD: 7,
    FAIR: 5,
    POOR: 3,
    VERY_POOR: 1
};